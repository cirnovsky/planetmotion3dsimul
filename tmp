
<!-- <!DOCTYPE html> -->
<!-- <html> -->
<!-- <head> -->
<!-- 	<title>Planetary Motion 3D Simulation</title> -->
<!-- 	<meta name="viewport" content="width=device-width, initial-scale=1" /> -->
<!-- 	<meta charset="UTF-8" /> -->
<!---->
<!-- 	<link rel="stylesheet" href="/src/styles/main.css" type="text/css" /> -->
<!---->
<!-- 	<script type="module" src="/src/js/main.js"></script> -->
<!-- </head> -->
<!-- <body> -->
<!-- 	<div id="scene-container"> -->
<!-- 	</div> -->
<!-- </body> -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Gravity-Based Planet Motion</title>
  <style>body { margin: 0; overflow: hidden; } canvas { display: block; }</style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
  <script>
    // Constants
    const G = 0.00029591220828559104; // Gravitational constant in AU^3 / (M☉ * day^2)
    const AU = 1; // Astronomical unit in simulation units
    const DAY = 1; // 1s = 1 day
    const dt = 0.05; // Time step in days

    // Setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.01, 1000);
    camera.position.set(0, 2, 5);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Light
    const light = new THREE.PointLight(0xffffff, 2);
    light.position.set(0, 0, 0);
    scene.add(light);

    // Bodies
    const bodies = [];

    function createBody({ name, mass, position, velocity, size, color }) {
      const geom = new THREE.SphereGeometry(size, 32, 32);
      const mat = new THREE.MeshStandardMaterial({ color });
      const mesh = new THREE.Mesh(geom, mat);
      mesh.position.copy(position);
      scene.add(mesh);
      bodies.push({ name, mass, pos: position.clone(), vel: velocity.clone(), acc: new THREE.Vector3(), mesh });
    }

    // Sun
    createBody({
      name: 'Sun',
      mass: 1.0,
      position: new THREE.Vector3(0, 0, 0),
      velocity: new THREE.Vector3(0, 0, 0),
      size: 0.1,
      color: 0xffff00
    });

    // Earth
    createBody({
      name: 'Earth',
      mass: 0.000003, // Earth mass relative to Sun
      position: new THREE.Vector3(AU, 0, 0),
      velocity: new THREE.Vector3(0, 0, 0.017202), // ~2π AU / 365 days
      size: 0.03,
      color: 0x3399ff
    });

    // Mars
    createBody({
      name: 'Mars',
      mass: 0.0000003,
      position: new THREE.Vector3(1.52 * AU, 0, 0),
      velocity: new THREE.Vector3(0, 0, 0.013),
      size: 0.025,
      color: 0xff5533
    });

    // Physics loop
    function updatePhysics() {
      for (let i = 0; i < bodies.length; i++) {
        let body = bodies[i];
        body.acc.set(0, 0, 0); // reset acceleration

        for (let j = 0; j < bodies.length; j++) {
          if (i === j) continue;
          let other = bodies[j];
          let rVec = new THREE.Vector3().subVectors(other.pos, body.pos);
          let distance = rVec.length();
          let forceMag = G * other.mass / (distance * distance + 1e-6);
          let force = rVec.normalize().multiplyScalar(forceMag);
          body.acc.add(force);
        }
      }

      // Euler integration
      for (let body of bodies) {
        body.vel.add(body.acc.clone().multiplyScalar(dt));
        body.pos.add(body.vel.clone().multiplyScalar(dt));
        body.mesh.position.copy(body.pos);
      }
    }

    function animate() {
      requestAnimationFrame(animate);
      for (let step = 0; step < 4; step++) updatePhysics(); // simulate 4 sub-steps/frame
      renderer.render(scene, camera);
    }

    animate();

    window.addEventListener("resize", () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
